let 
	只在当前代码块有效，
	不存在变量提升，会报错，var会报undefined
	暂时性锁区，let绑定的块级作用域然后再let前赋值会报错

for循环用let，使用var时，全局只有一个值，每次循环都会改变值

当维护this的时候，可以定一个this值，like- var that = this;

之前使用indexOf() > -1来判断是否含有这个值
	var string = 'food';
	var substring = 'foo';
	console.log(string.indexOf(substring) > -1);
	现在有了个includes()
	console.log(string.includes(substring));

使用模板字符串
	var text = "This string contains \"double quotes\" which are escaped.";
	let text = `This string contains "double quotes" which don't need to be escaped anymore.`;
	//插入变量值和字符串
	var name = 'Tiger';
	var age = 13;
	console.log('My cat is named ' + name + ' and is ' + age + ' years old.');
	//支持换行不用逗号
	let text = (`
			dog
			cat
			cow
		`)
	//支持表达式
	let today = new Date();
	let text = `the time is ${today.toLocalString()} `

解构数组
	let [a,b,c] = [1,2,3]
	结构对象
	let biao = {age:24,sex:'boy'}
	console.log(biao.age)

模块
	node使用require
	之前使用Browserify 
	es6使用CommonJS
		出口
		//暴露多个值或者一个对象列表
		export let name = 1;
		export let age = 25;
		function subTwo(a,b){
			return a + b;
		}	
		export{subTwo};
		//或者直接export暴露
		export function subTwo(a,b){
			return a + b;
		}
		//或者绑定一个默认输出
		function subTwo(a,b){
			return a + b;
		}
		let api = {
			subTwo,
		};
		export default api;

		导入
		import {subTwo,subThree} from './';
		//重命名导入
		import {
		    sumTwo as addTwoNumbers,
		    sumThree as sumThreeNumbers
	    } from 'math/addition';
	    //整体加载
	    import * as util from './';














utility :多用途，多功效的

for(var i = 0;i < length; i++){
	console.log(i);
}
for(var i = 0;i < length; i++){
	function(i){
		console.log(i)
	}
}
 

function bar(x = y, y = 2) {
  return [x, y];
}
bar(); // 报错
参数x默认值等于y，y还没有声明，属于死区，所以会报错

function add([a,b]){
	return a + b;
}
add([1,2])

[[1,2],[2,3]].map(([a,b]) => a + b);

		变量声明不能用圆括号
		函数参数不能
		赋值语句的模式

提取json	
		let jsonData = {
			id:1,
			status:'ok',
			data:'hello'
		}
		let {id,data,status} = jsonData;
		console.log(jsonData)

		const map = new Map();
		map.set('first','hello');
		map.set('second','world');
		for (let [key,value] of map){
			console.log(key + ':' + value)
		}

字符串扩展
		js采用unicode的形式表示一个字符串\uxxxx
				只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。
				"\uD842\uDFB7"
				// "𠮷"
				"\u20BB7"
				// " 7"
		es6采用\u{2000},放入大括号就能读取字符串
		'\z' === 'z'  // true
		'\x7A' === 'z' // true
		'\u007A' === 'z' // true
		'\u{7A}' === 'z' // true

		添加了遍历器iterator接口
				for(let codePointAt of 'foo'){

				}

		at()
		charAt()
		console.log('abc'.charAt(0)) //a,但是该方法不能识别码点大于0xFFFF的字符。
		console.log('abc'.at(0)) //a

		传统js使用indexOf()返回-1或1来判断是否有这个值
		es6增加了includes(),startsWith(),endsWith()
		let name = 'biao';
		name.startsWith('bi')

		repeat()返回一个新的字符串，将原来的字符串重复
		'hello'.repeat(2) //'hellohello'
		参数若是小数就会取整'na'.repeat(2.8) //nana
		如果repeat的参数是负数或者Infinity，会报错。
		0 - -1之间和NAN都是为0

		padStart()用于头部补全，padEnd()用于尾部补全。
		如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。
		如果省略第二个参数，默认使用空格补全长度。
		'x'.padStart(5,'ad') //adadx
		'xxx'.padStart(2,'ad') //xxx
		'x'.padStart(2) // x
		padStart的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。
		'12'.padStart(4,'0') //0012

		matchAll() //正则表达式

模板字符串
	$('.id').append(
			  'There are <b>' + basket.count + '</b> ' +
			  'items in your basket, ' +
			  '<em>' + basket.onSale +
			  '</em> are on sale!'
		)
	es6是``，一些转译符因此也可以用这个代替'\n'
	$('.id').appdend(
			`
				There are <b>${basket.count}</b> items
				in your basket, <em>${basket.onSale}</em>
				are on sale!
			`
		)
	.trim()去除空格

	模板使用函数,函数里面也能嵌套函数
		function str(){
			return 'hello!';
		}
		console.log( `nihao ${str().toString()} `)
	`Hello ${'World'}`

模板实例
	let template = `
		<ul>
		  <% for(let i=0; i < data.supplies.length; i++) { %>
		    <li><%= data.supplies[i] %></li>
		  <% } %>
		</ul>
	`
	使用<%...%>放置 JavaScript 代码，使用<%= ... %>输出 JavaScript 表达式。
1:	转化js
	echo('<ul>');
	for(let i = 0;i < data.supplies.length; i++){
		echo('<li>');
		echo(data.supplies[i])
		echo('</li>');
	}
	echo('</ul>');
2:  

标签模板
	alert`123` === alert(123)
	
String.raw()


正则的扩展
	var regex = new RegExp('xyz','i');  //参数是字符串
	var regex new RegExp(/xyz/i);  //参数是正则表达式

	都等价于var regex = /xyz/i ;
	es5不允许添加第二个修饰符

	es6
	字符串对象的四个方法
		match()  String.prototype.match 调用 RegExp.prototype[Symbol.match]
		search()
		replace()
		split()
	flags返回修饰符
	/abc/ig.flags  //'gi'

数值
	二进制和八进制，0b,0o表示
	Number - Number.isFinite() 判断是否有限数字，参数不是数值的类型也是返回false
	Number - Number.isNaN()  判断是否为NaN，
	Number.parseInt()
	Number.parseFloat()
	Number.isInteger() 判断是否为整数

Number.EPSILON === Math.pow(2, -52)
// true
实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。
JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。
Number.MAX_SAFE_INTEGER
Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内

Math.trunc方法用于去除一个数的小数部分，返回整数部分。
非数值，Math.trunc内部使用Number方法将其先转为数值。
对于空值和无法截取整数的值，返回NaN
	Math.trunc(4.1) // 4
	Math.trunc('123.456') // 123
	Math.trunc(NaN);      // NaN

Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。
Math.sign(-5) // -1
Math.sign(5) // +1
Math.sign(0) // +0
Math.sign(-0) // -0
Math.sign(NaN) // NaN

Math.hypot方法返回所有参数的平方和的平方根。
	Math.hypot(3, 4);        // 5

ES2016 新增了一个指数运算符（**）。
2 ** 2 // 4
2 ** 3 // 8


函数的扩展
	可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；
	其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行
	function log(x,y = 'world'){
		console.log(x,y);
	}
	log('hello') //hello world
	log('hello','china') //hello china
	log('hello','') //hello 


 function foo(x = 5) {
  let x = 1; // error
  const x = 2; // error
}

和解构赋值一起
function foo({x,y = 5}){
	console.log(x,y);
}
foo({}) //undefined 5
foo({x:1}) //1,5
foo({x:1},{y:2}) //1,2
传入undefined会默认触发默认值，null就不会

函数的length属性在设置了默认值后就会失真
(function(a){}).length //1
(function(a = 5 ){}).length //0

rest参数(...变量名)用于获取函数的多余参数，这样就不用arguments
	rest参数只能是最后一个参数，
	function add(...values){
		let sum = 0;
		for( let val of values){
			sum += val;
		}
		return sum;
	}
	add(1,2,3)
	//这个add是一个求和参数，利用rest函数传入任意参数

function push(array,...items){
	items.forEach(function(item){
		array.push(item);
		console.log(item)
	})
}
var a = [];
push(a,1,2,3)

name属性，返回函数的名字
	function foo(){
	}
	foo.name;

箭头函数 =>
var f = v => m;
var f = () => m;  //如果没有参数或者需要多个参数就使用括号
var f = (a,b) => m;
var f = function(v){
	return m;
}
var sum = (num1, num2) => { return num1 + num2; }

[1,2,3],map(x => x * x)
var result = values.sort((a,b) => a-b);

const numbers = (...nums) => nums;
numbers(1,2,3)

关于箭头函数的this对象
	函数体内的this只在当时所在的函数生效的对象


函数绑定运算符 :: 左边对象右边函数
如果冒号左边是空，右边是对象的话,则将该方法绑定到该对象上
	let method = obj::obj.foo;
	let method = ::obj.foo;
	foo::bar  === bar.bind(foo)

尾调函数就是函数最后一步就是调用这个函数本身

数组的扩展
	console.log(...[1, 2, 3])
	// 1 2 3
	console.log(1, ...[2, 3, 4], 5)
	// 1 2 3 4 5

	function push(array,...items){
		array.push(...items);
	}
	function add(x,y){
		return x + y;
	}
	const numbers = [2,3,4];
	add(...numbers)

	替代函数的apply方法
		function f(x,y,z){

		}		
		let args = [1,2,3]
		f.apply(null,args);
		Math.max.apply(null,[1,2,3]);
		Array.prototype.push.apply(arr1,arr2)
		es6
		Math.max(...[1,2,3])
		f(...args)
		arr1.push(...arr2)

		var arr1 = [0, 1, 2];
		var arr2 = [3, 4, 5];

		数组直接赋值的话是复制指向底层数据结构的指针，修改一个数据会修改原先的数组
		可以使用concat(),本来是链接的意思，但是本省是空数组的话，链接就相当于赋值了
			const a1 = [1,2]
			const a2 = a1.concat();
			const a3 = [...a1];
			const [...a3] = a1;

			将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错
			function(...rest,add) //报错

[...'hello']
// [ "h", "e", "l", "l", "o" ]

任何iterator接口对象都可以转化为真正数组
let nodeList = document.querySelectorAll('div');
let array = [...nodeList];

Array.from() 把俩类对象化为真正的数组
let arrayLike = {
	'0':'a',
	'0':'a',
	'0':'a',
	length:3
}
var arr1 = [].slice.call(arrayLike);
var arr1 = Array.from(arrayLike)


Array.of() //将一组值转换为数组
Array.of(2,3,4) //[2,3,4]
弥补了Array()的不足，少于俩个参数的时候行为会有差异，使用Array.of()结果会非常统一

copyWithin(target,start=0,end=this.length)
[1, 2, 3, 4, 5].copyWithin(0, 3)
// [4, 5, 3, 4, 5]
上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。
[1, 2, 3, 4, 5].copyWithin(0, 3, 4)
// [4, 2, 3, 4, 5]

find()  findIndex()
	[1,2,3,-3].find((n) => n < 0) //-3
	findIndex返回第一个符合条件的数组位置，如果都不符合就会返回-1，
	
fill() //给定值填充一个数组
[1,2,3].fill(7) //[7,7,7]
['a','b','c'].fill(7,1,2) // a,7,c

如果填充的类型是对象，那么被赋值的就是同一个内存地址的对象，不是深拷贝对象
let arr = new Array(3).fill({name:'mike'})
arr[0].name = 'ben'
//[{name:'ben'},{name:'ben'},{name:'ben'}]


es6提供,遍历数组，
	entires()
	keys()  //键名的遍历
	values() //对值的遍历
	for(let [index,elem] of ['a','b'].entires()){
		//0 'a'
		//1 'b'
	}

Array.prototype.includes() 返回一个布尔值
[1,2,3].includes(2) //true
[1, 2, 3].includes(3, -1); // true  第二个参数表示位置，负数就是倒数，大于长度就显示false
indexOf()判断是否为-1，来看有没有正确拥有

数组的空位

















