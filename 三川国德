1. ele 上传调俩次接口
:auto-upload="false"

2. Content-Type
    mime类型 internet media type 表示具体请求中的媒体类型
    类型格式：type/subtype(;parameter)? type  
    form-data multipart/form-data  
        将表单数据处理成一条消息，既可以上传文件，也可以上传键值对
    x-www-form-urlencoded application/x-www-form=urlencoded
        将表单数据转为键值对，&分隔
    raw 可上传任意文本 Text,json,xml,html,js
    binary 只可上传二进制文件，由于没有键值对，只能一次上传一个文件

3. 设计模式
    设计模式主要是针对面向对象语言的一种设计思想，提高代码复用，抵御变化，降低影响
    封装：隐藏内部实现
    继承：复用现有代码
    多态：改写对象行为

4.  TARMAC SL6 SPORT DISC
    TCR ADVANCED PRO 2 DISC
    佳能戴尔SuperSix EVO
    Trek Madone9.2
    超6
5.  node 的eventEmitter on事件可以叠加相同方法

6.  axios全局loading多个请求的时候使用loadingCount计数，发送一次加1，完成减1，0时关闭loading

7.  vue打印js print-js

8.  前端下载
    1. 后台通过url window.open(url)
    2. 后台返回二进制内容，前端转化再下载
        假设返回res为二进制
        const data = res
        const url = window.URL.createObjectURL(new Blob([data], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}))
        const link = document.createElement('a')
        link.style.display = 'none'
        link.href = url
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)

9.  自动忽略console.log
    export function rewirteLog() {
        console.log = (function (log) {
            return process.env.NODE_ENV == 'development'? log : function() {}
        }(console.log))
    }

10.  vue表达validate验证自定义规则的时候，每一种情况都要callback()
    // 平台水表下 通讯信息下不用填
    let isPTSB = (rule, value, callback) => {
        if (this.form.mgnModelCode !== '1' && !value) {
            callback(new Error(rule.message));
        } else {
            callback()
        }
    }

11. input Number oninput="if(isNaN(value)) { value = null } if(value.indexOf('.')>0){value=value.slice(0,value.indexOf('.')+3)}"
    oninput="value=value.replace(/[^\d]/g,'')"

12.sortTreeData (data) {
    if (data.children.length !== 0) {
      for (let i = 0; i < data.children.length; i++) {
        if (data.children[i].children.length === 0){
          data.children[i].children = undefined
        } else {
          this.sortTreeData(data.children[i]);
        }
      }
      return data;
    }
  },

13. for of 循环对象object，给对象加上iterator接口
Object[Symbol.iterator] = function () {
    const _this = this
    return {
        index: -1,
        next() {
            const arr = Object.keys(_this)
            if(this.index < arr.length) {
                this.index++
                return {
                    value: _this[arr[this.index]],
                    done: false
                }
            } else {
                return {
                    value: undefined,
                    done: true
                }
            }
        }
    }
}

14. opacity透明度 0 - 1
    rgba    Alpha透明度。取值0~1之间 gba是颜色
    俩者都可以实现透明效果，opacity用于元素及元素内所有内容的透明度，后者用于单独元素的颜色和背景色

15 垂直居中
position absolute 50% + transform -50%

position absolute 50% + 负margin -50%

display: table-cell;
text-align: center;
vertical-align: middle;

display: flex;
justify-content: center;
align-items: center;

16
全局路由守卫
router.beforeEach((to, from, next) => {
    next()
})
router.afterEach((to, from))
组件内路由守卫
beforeRouterEnter()
beforeRouterUpdate()
beforeRouterLeave()
router独享守卫
export default new Router ({
    routes: [
        {
            path: '/',
            name: 'home',
            componene: home,
            beforeEnter: (to, form, next) => {}
        }
    ]
})

17.webpack优化
打包时间，打包后的大小
合理使用loader， include,exclude
happypack多进程打包，建立child_process子进程根据cpu优势执行多个任务，提高打包效率
tree shaking 分析import export的依赖关系，对没有使用的代码删除较少体积
按需加载，require.ensure,import

配置多页面
entry: {
    index: '',
    list: ''
}
html html-webpack-Plugin
plugins: [
    new htmlWebpackPlugin({
        title: '首页',
        template: './index.html',
        inject: 'head',
        filename: 'index.html',
        chunks: ['index']
    })
]

18. push是根据length的属性定义开始插入的位置
es6 array includes every some fliter new Set Array.from find findIndex map reduce ...扩展运算符

模块化
commonJs  node  弥补服务端的模块化机制，不像服务器加载速度很快，客户端加载时需要等待，可能存在假死情况
let { stat, exists, readfile } = require('fs');
module.exports exports require
module.exports = {
    name: '1'
}
exports.name = '1'  内部上市对module.exports的引用

amd 采用异步方式加载模块定义的所有依赖，在依赖加载完成后再执行回调函数
    define([module-name?], [dependencies?], [factory])
cmd CMD规范是就近加载依赖，延迟执行，只有到require时依赖才执行。

es module 
    import a from ''
import { Hash } from 'crypto'


组件全局注册和局部注册及打包

js继承 寄生组合式继承
es6 calss 继承，基于寄生组合继承实现 class constructor extends super()
    寄生组合继承
    组合继承    原型继承和构造函数继承结合，    
        缺点：call已经继承父类的属性，后面再使用原型时会重复含有父类的属性
    原型继承    将子类的原型挂载在父类上
        缺点：子类的方法和属性会影响父类，
    构造函数继承 apply, call  直接利用call或者apply方法将父类构造函数的this绑定为子类构造函数的this就可以
        缺点无法继承原型链上的属性和方法

new与Object.create()区别
new创建一个对象，执行构造函数。
Object.create相当于创建一个对象，但是不执行构造函数。

js单线程，调用一个方法就会产生执行上下文，执行栈，遇到异步任务放到事件队列中
宏任务：settimeout setinerval  setImmediate在poll阶段后执行类型nexttick script UI rendering I/O
微任务：mutatiobobserver promise Node独有的process.nextTick V8的垃圾回收过程

this指向window 严格模式下为undefined
function this指向调用他的对象
箭头函数体内的this对象，就是定义该函数时所在的作用域指向的对象

webpack Hash 浏览器缓存原因，打包的时候加上对应的版本号
    Hash 跟整个项目的构建相关，只要项目里有文件更改，整个项目构建的hash值都会更改，并且全部文件都共用相同的hash值
    chunkhash 根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值
    contenthash 主要是处理关联性，比如一个js文件中引入css，但是会生成一个js文件，一个css文件，但是因为入口是一个，导致他们的hash值也相同，所以当只有js修改时，关联输出的css、img等文件的hash值也会改变，这种情况下就需要contenthash了。
    

强缓存优先协商缓存

bfc 独立的渲染区域  
1、float的值不是none。 BFC的区域不会与float box重叠
2、position的值不是static或者relative。
3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex
4、overflow的值不是visible 于同一个BFC的两个相邻的Box会发生margin重叠，给第二个加上div包围
5.清楚浮动  计算BFC的高度时，浮动元素也参与计算。

options预请求 浏览器对复杂跨域请求的一种处理方式,在真正发送请求之前,会先进行一次预请求，
    是用于试探性的服务器响应是否正确,即是否能接受真正的请求,如果在options请求之后获取到的响应是拒绝性质的,例如500等http状态,那么它就会停止第二次的真正请求的访问
    1:请求的方法不是GET/HEAD/POST
    2:POST请求的Content-Type并非application/x-www-form-urlencoded, multipart/form-data, 或text/plain
    3:请求设置了自定义的header字段

vue install
    组件使用频率高的时候可以注册全局组件，避免每次导入,再main.js中注册
    componentA
    import A from componentA
import { stringify } from 'querystring'
import { nextTick } from 'process'
    const component = {
        install: function(Vue) {
            Vue.component('zujain', A)
        }
    }
    main.js Vue.use(component)

vue模板实现原理
    将模板编译成ast语法树，ast再通过generate转化为render函数，
    通过watcher函数监听属性变化调用render函数生成Vnode，通过createElement方法生成虚拟dom，patch的diff算法，dep.notify()生成dom

双向绑定 通过数据劫持结合发布者-订阅者模式,Object.defineProperty()
1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。
2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。
3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。

tcp
每一次TCP连接都需要经过三个阶段：连接建立、数据传送和连接释放
第一次握手：建立连接时，客户端发送SYN包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认
第二次握手：服务器收到SYN包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。

第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态
b) 第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。
c) 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发一个 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。
d) 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态

ts

/*
 请实现filter函数，该函数功能如下：
 var ret = [1,2,3,4].filter((i) => {
   return i % 2 === 0;
});
 //结果：ret = [2,4];
*/

请实现一个算法，能够将给定字符串按给定的数量循环移动，例如：
const str = 'abcdef';
const ret = move(str, 2);
结果：ret为efabcd
const str = 'abcdef';
const ret = move(str, 11);
结果：ret为bcdefa
*/

后台的权限管理，addRoutes
一是静态注册好所有的路由，在登录后根据登录的角色所拥有的权限去一个个对比，控制哪些页面进行隐藏和显示、
二是初始化路由时只注册登录、注册这种不需要权限就可以访问的路由，在登录时请求接口更根据后台返回的菜单进行处理后动态添加到路由中
data.forEach((datas, index) => {
    arr.push({
        path: datas.path,
        name: datas.name,
        components: require('../' + datas.component + '.vue'),
        iconCls: datas.iconCls,
        redirect: datas.redirect,
        hidden: datas.hidden,
        id: datas.id,
        children: []
    })
    if(datas.children.length > 0) {
        let childArr = tree(datas.children, [])
        arr[index].children = childArr;
    }
})
router.addRoutes(state.menuList)
dispatch action方法
commit(方法，内容)
beforeEach,afterEach
判断token和isLogibn，刷新失效后返回首页获取token登陆next({path: '/login'})

vuex刷新数据清空
mounted() {
    window.addEventListener('unload', this.saveState)
},
methods: {
    saveState() {
        sessionStorage.setItem('state', JSON.stringify(this.$store.state))
    }
}

select下拉时数量巨大，模拟展示几条，搜索时查询全部
filterMethod(query){
    if(query === '' || query===undefined){
        this.bomLists = this.option.slice(0,100)//这是一开始截取100条数据
    }
    else{
        let result = []//存储符合条件的下拉选项
        this.option.forEach(val=>{
            if(val.bomNo.toLowerCase().indexOf(query.toLowerCase())!==-1){
                result.push(val)//这里可以做判断
            }else if(val.name.toLowerCase().indexOf(query.toLowerCase())!==-1){
                result.push(val)
            }
        })
        this.bomLists = result.slice(0,100) //只取前100个
    }
},

axios配置
axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 两个请求现在都执行完成
  }));
  const service = axios.create({
    //   baseURL: '/api-user',
    // withCredentials: true, // send cookies when cross-domain requests
    timeout: 30000,
    headers: {
        'Content-Type': 'application/json; charset=utf-8',
        // ...headerParams,
    },
});
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.interceptors.request.use
axios.interceptors.response.use
var CancelToken = axios.CancelToken;
var source = CancelToken.source();
axios.get('/user/12345', {
    cancelToken: source.token
  }).catch(function(thrown) {
    if (axios.isCancel(thrown)) {
      console.log('Request canceled', thrown.message);
    } else {
      // 处理错误
    }
  });
  
  // 取消请求（message 参数是可选的）
  source.cancel('Operation canceled by the user.');

状态码
301与302的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）
401 Unauthorized：未经许可，需要通过HTTP认证；
403 Forbidden：服务器拒绝该次访问（访问权限出现问题）

webpack优化
compression-webpack-plugin 打包时开启GZIP减小体积 config/index.js文件中修改productionGzip: true;
webpack-bundle-analyzer 查看压缩前后大小
externals: {
    jquery: 'jQuery' 
    //将需要忽略打包的都写在这个里面，但前提是index.html文件里面必须script引入
  }

map返回新数组，会将处理过的数据组成一个新的数组
filter返回新数组，但是也会将满足条件的元素组成印个新的数组，return出来
forEach不反回新数组，而是在原数组的基础上改变数组，可以用于数组的修改
map和filter的区别主要在于，当过滤而不是改变的时候，map return的是一个盛放布尔值的数组
every不是过滤也不是进行处理，也不会生成新的数组，他是对数组中的每一个元素进行判断

vue-router三种模式
Hash：使用url的hash值作为路由，适用所有浏览器
    window.onhashchange = function(event){
        console.log(event.oldURL, event.newURL);
        let hash = location.hash.slice(1);
        document.body.style.color = hash;
    }
history：h5api和配置
    hashchange只能修改#后面的url内容
    history api可以分为两大部分：切换和修改，原有的back,forward,go, h5的replacestate，pushState，onPopState
    文件 router.js将 mode 设置成 history 模式，并设置base：rootFile（和网站根目录名称一致，不然会报错）
abstract：支持所有js运行环境，没有浏览器的api时强制进入这个模式

margin： 10 20 30； 上10 左右20 下30

数据类型， 数组，function等
undefined boolean string Number Symbol function object
typeof null   返回类型错误，返回object
typeof function 返回function，其他引用数据类型返回object
null 有属于自己的数据类型 Null ， 引用类型中的 数组、日期、正则 也都有属于自己的具体类型，而 typeof 对于这些类型的处理，只返回了处于其原型链最顶端的 Object 类型

instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。  [] instanceof Array 返回true

toString是object的原型方法，默认返回该对象的【class】,对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。
    Object.prototype.toString.call('') ;   // [object String]

数组对象去重
1.循环数组，对象判断是否存在(json[item[id]]) // （arr，id） id作为唯一值
2.
// 方法三， 方法三会更改数组的原始数据
function distinct3(arr, key){
    for(let i = 0; i < arr.length; i++) {
        for(let j = i+1; j < arr.length; j++) {
            if(arr[i][key] === arr[j][key]){
                arr.splice(j, 1);
                j = j-1;
            }
        }
    }
    return arr;
}


改变this指向 apply, call, bind
普通函数调用 this指向window
定时器函数指向window
构造函数指向实例对象
对象方法指向该对象
事件绑定指向绑定该事件的对象
apply（）使用参数数组，而不是参数列表
localStorage只支持字符串，需要进行stringify转换

父子组件通信: props; $parent / $children; provide / inject ; ref ; $attrs / $listeners
兄弟组件通信: eventBus ; vuex
跨级通信: eventBus；Vuex；provide / inject 、$attrs / $listeners

都能让元素隐藏
display: none 让元素完全从渲染树中消失，渲染时不再占据任何空间，不能点击； 重排
opacity:0; 不会让元素从渲染树上消失，渲染元素继续占据空间，只是内容不可见，不能点击； 重绘
visibilty:hidden 不会让元素在渲染树中消失，渲染元素继续占据空间，只是内容不可见，可以点击； 重绘
display:none和opacity:0：是非继承属性
visibilty是继承性，子节点可以进行一个展开

less scss的区别
变量、嵌套、运算,混入(Mixin)、继承、颜色处理，函数
Less 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可在服务端运行 (借助 Node.js)
1.编译环境不一样，Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件，直接放到项目中
2.变量符不一样，Less是@，而Scss是$，而且变量的作用域也不一样。
3.Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持。
4.scss引用的外部文件命名必须以_开头，以下划线_开头的话，Sass会认为该文件是一个引用文件，不会将其编译为css文件.
5.Sass和Less的工具库不同，前者Compass，后者Bootstrap
6.Sass提供4中输出选项：nested, compact, compressed 和 expanded。
原生css声明变量
body {
    --color: red;
}

watch监听一次就取消的方法
watch: {
    arr: {
        handler () {

        },
        deep: true, // 监听对象中每个属性的变化
        immideate: true // 以表达式形式立即执行一次
    }
}


数组取第一项和最后一项哪个性能更好： 性能一样，数组是一块线性连续的内存,我们可以通过寻址公式一步取出对应的成员,这跟成员的位置没有关系.
数组是由相同类型的元素集合组成的数据结构，分配一块连续的内存储存

json.stringify() parae()的第二个及后面参数  undefined, Object, Symbol("") 会转为null
json.stringify([], function, space)
第二个值function的时候处理每一个stringify后的对象数组，是数组的是进行序列化，第二个的是第一个的value，如果key不相同则省略
第三个参数是连接符
JSON.parse(text [, reviver])
如果 reviver 返回一个有效值，则成员值将替换为转换后的值。
如果 reviver 返回它接收的相同值，则不修改成员值。
如果 reviver 返回 null 或 undefined，则删除成员。


promise all race 执行报错的时候，哪个先执行成功，会不会执行
promise.all([p1,p2]).then(() => {})成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。
Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。


react

从创建到挂载，是从外到内，再从内到外，且mixins的钩子函数总是在当前组件之前执行
mixin 子组件 和父组件的生命周期
父组件先于子组件createed，子组件先于mounted（组件挂载到页面之后触发
只有在标签上绑定了data时，data发生改变，才会触发updated钩子函数。如果只是在控制台改变data，而没有反馈到视图上，则无法触发。

const 对象可以修改值
量是放在栈中的，而对象是放在堆中的。对于对象赋值，const指向的仅仅是他的地址，cosnt仅仅是保证这个地址不改变，至于地址对应的数据，是可以进行改变的

nextTick(() => {}) 下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM
Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个事件队列，并缓冲在同一事件循环中发生的所有数据变更。
如果同一个 watcher 被多次触发，只会被推入到事件队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。
然后，在下一个的事件循环“tick”中，Vue 刷新事件队列并执行实际 (已去重的) 工作。

js单线程操作dom
作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。
这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准

0.01 0.02 计算的库
关于金额等数字计算，最好放到后台程序去计算，尽量不要让js做计算操作
javaScript中的二进制的浮点数0.1和0.2并不是十分精确 0.30000000000000004 ，所以条件判断结果为false
1.先乘10.计算后除去10
2.parseFloat((0.1+0.2).toFixed(10)) ===0.3
3.js库 math.js

json.parse(json.stringify(arr))的缺点  只能是Number, String, Boolean, Array, 扁平对象，即那些能够被 JSON 直接表示的数据结构。
1.如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式，而不是对象的形式
2.如果obj里有RegExp(正则表达式的缩写)、Error对象，则序列化的结果将只得到空对象；
3.如果obj里有函数，undefined，则序列化的结果会把函数或 undefined丢失
4.如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null
5.如果对象中存在循环引用的情况也无法正确实现深拷贝；

JSON.stringify()
判断数组是否包含某对象，或者判断对象是否相等。 console.log(JSON.stringify(data).indexOf(JSON.stringify(val)) !== -1);
判断两数组/对象是否相等
让localStorage/sessionStorage可以存储对象。

window.location.href
onsole.log("路由路径：",this.$route.path)
console.log("路径参数：",this.$route.query)

1.通过后端接口直接通过url跳转到下载地址即可
window.location.replace(http://172.******/exports/${id}/download`)
2.通过后端接口前端实现下载请求
this.$axios.get(`${this.$config.apiDomain}/crowds/exports/${row.id}/download-crowd`)
.then(({data})=>{
// data 直接传入now Blob中
    const blob = new Blob([data], { type: 'cache-control,expires,pragma,content-type' })
    const downloadElement = document.createElement('a')
    const href = window.URL.createObjectURL(blob)
    downloadElement.href = href
    downloadElement.download = row.id+'.csv'
    document.body.appendChild(downloadElement)
    downloadElement.click()
    document.body.removeChild(downloadElement) // 下载完成移除元素
    window.URL.revokeObjectURL(href) // 释放掉blob对
})

let arr = [1,2]
let arr2 = arr
arr[0] = arr2[1]
console.log(arr)
arr.push(3)
console.log(arr)
console.log(arr2)

构造函数，class等继承实现
function Person(x, y) {
    this.x = x
    this.y = y
}
var person = new Person(1,2)
person.prototype.say = function() {
    retrun this.x + this.y
}

前端权限
接口权限 401权限不足，返回重新登录token axios前置response.use
const {token} = login()
cookie.set('token',token)
axios.interceptors.request.use(config => {
        config.headers['token'] = cookie.get('token')
    return config
})
axios.interceptors.response.use(res=>{},{response}=>{
    if (response.data.code === 40099 || response.data.code === 40098) { //token过期或者错误
      router.push('/login')
    }
})
按钮权限
页面权限
路由权限

this.$refs['uploadElement'].clearValidate()

面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用
面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。
    封装，继承，多态，抽象

首次进入校验，form-item的属性
居中
大量输入项的数组操作 切割组件，vue的defineProperty监听影响性能，区分react
js设计思想，面对对象
promise之前是怎么样
微前端

分支管理及代码发布
master bug => master
dev feast => dev

组件组合拖曳思想

路由懒加载 首屏组件加载速度，解决白屏问题
延迟加载
按需加载
vue异步组件
    未用：import HelloWorld from '@/components/HelloWorld'
    使用：component: require=>(require(['@./'], resolve))
es6 import
    const HelloWorld = （）=>import("@/components/HelloWorld")
webpack提供的require.ensure()
    const list = r => require.ensure([], () => r(require('../components/list/list')), 'list');


首页白屏优化 网速跟静态资源
css文件加载需要一些时间，在加载的过程中页面是空白的。 解决：可以考虑将css代码前置和内联。
首屏无实际的数据内容，等待异步加载数据再渲染页面导致白屏。 解决：在首屏直接同步渲染html，后续的滚屏等再采用异步请求数据和渲染html。
首屏内联js的执行会阻塞页面的渲染。 解决：尽量不在首屏html代码中放置内联脚本
根本原因是客户端渲染的无力，因此最简单的方法是在服务器端，使用模板引擎渲染所有页面
1减少文件加载体积，如html压缩，js压缩
2加快js执行速度 比如常见的无限滚动的页面，可以使用js先渲染一个屏幕范围内的东西
3提供一些友好的交互，比如提供一些假的滚动条
4使用本地存储处理静态文件。
SSR
在服务端将渲染逻辑处理好，然后将处理好的HTML直接返回给前端展示，这样就可以解决白屏的问题，也可以解决seo的问题，因为不需要动态获取数据
从页面之所以渲染过程详解  先生成dom树，然后按照css导入顺序渲染生成css树，结合成render树，浏览器渲染到屏幕上，重绘，重排
减少DOM树渲染的时间（HTML层级不要太深，标签语义化…)
CSS放在页面的开始位置（提前请求资源 用link别用@import
当代浏览器都有一个预处理机制htmlimportimport { get } from 'http'
 { resolve } from 'path'
-preload-scanner，在GUI渲染前就把“src” , “link”等属性中需要请求的资源进行发送，找到外部链接资源后进行预加载，避免了资源加载的等待时间，同样实现了提前加载以及加载和执行分离。
JS一般放在页面的尾部，就是为了确保DOM树生产完才会加载JS
JS会阻碍GUI的渲染，先把JS去请求(Http线程)，再把请求回来的执行，只有JS执行完，再去GUI渲染
减少CSSOM树渲染时间（选择器是从右向左解析，所以尽可能减少层级），less和sass中的层级嵌套

对象非空
JSON自带的.stringify方法来判断；JSON.stringify(obj) === '{}'
es6 Object.keys(obj).length !== 0
for...in...遍历bai性，结果du为真是“zhi非空数组”，否则是“空数组”

代码规范
降低每个组员介入项目的门槛成本；
提高工作效率及协同开发的便捷性
高度统一的代码风格
提供一整套HTML、CSS解决方案，来帮助开发人员快速做出高质量的符合要求的页面
分离 结构（HTML）、表现（CSS）、行为分离（JavaScript）
文件命名
缩进
驼峰
注释
属性顺序
class标签复用
less,scss的嵌套
选择器
js变量命名

cookie: 4kb,保存登陆信息，一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题
cookie是一个文本文件，保存在客户端硬盘中（如果设置了cookie的过期时间），或者在用户的浏览器内存中(如果cookie是临时的)
setcookie($name, $value, $expire, $path, $domain, $secure)  setcookie('xxx', 'yyyyyyyyyyyyy'); 并保存在浏览器的response Header
js-cookie  cookie.set()get()remove()
localStorage:除非删除，永久有效。5mb
sessionStorage:当前会话有效


for in 循环对象
循环对象的key值，和原型链上的key
只遍历对象自身的属性，而不遍历继承于原型链上的属性，使用hasOwnProperty 方法过滤一下。

JSON.parse(JSON.stringify(arr))
无法拷贝函数
无法拷贝原型链上的属性和方法
当数据层次深会栈溢出

普通递归
function deepClone(arr) {
    if (typeof arr === 'object' && arr !== null) {
        // 兼容数组
        let target = Array.isArray(arr) ? [] : {}
        for (var k in arr) {
            if (arr.hasOwnProperty(k)) {
                if (typeof arr[k] === 'object') {
                    target[k] = deepClone(arr[k])
                } else {
                    target[k] = arr[k]
                }
            }
        }
        return target
    } else {
        return arr
    }
}
无法保持引用
层级深会栈溢出

防栈溢出函数


Proxy 与 Object.defineProperty 优劣对比
proxy直接监听对象而不是属性
proxy直接监听数组的变化
proxy有十三种拦截方式
proxy返回的是新对象，所以只要操作新对象，后者遍历对象直接修改
proxy性能红利
后者兼容性好， ie
不能监听数组的变化
必须遍历对象的每个属性
必须深层遍历嵌套的对象

