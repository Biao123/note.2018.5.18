window.history属性指向 History 对象，它表示当前窗口的浏览历史

window.history.length // 3
由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航

// 后退到前一个网址
history.back()
// 等同于
history.go(-1)

History.forward()：移动到下一个网址，等同于点击浏览器的前进键。对于最后一个访问的网址，该方法无效果。

history.go(0)相当于刷新当前页面。

在历史中添加一条记录
window.history.pushState(state, title, url)
pushState()方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。

// 报错，防止恶意代码让用户以为他们是在另一个网站上，因为这个方法不会导致页面跳转。
// 当前网址为 http://example.com
history.pushState(null, '', 'https://twitter.com/hello');

在历史中修改当前记录
window.history.replaceState(state, title, url)
history.pushState({page: 1}, 'title 1', '?page=1')
// URL 显示为 http://example.com/example.html?page=1

	state：一个与添加的记录相关联的状态对象，主要用于popstate事件。该事件触发时，该对象会传入回调函数。也就是说，浏览器会将这个对象序列化以后保留在本地，重新载入这个页面的时候，可以拿到这个对象。如果不需要这个对象，此处可以填null。
	title：新页面的标题。但是，现在所有浏览器都忽视这个参数，所以这里可以填空字符串。
	url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。

popstate 事件
	每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。
	只有用户点击浏览器或者js调用history.back() / go() / forward() 才会调用
	
window.onpopstate = function (event) {
  console.log('location: ' + document.location);
  console.log('state: ' + JSON.stringify(event.state));
};

// 或者
window.addEventListener('popstate', function(event) {
  console.log('location: ' + document.location);
  console.log('state: ' + JSON.stringify(event.state));
});




